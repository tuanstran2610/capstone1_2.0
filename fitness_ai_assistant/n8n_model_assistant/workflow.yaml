steps:
###############################################
# CLASSIFY BEHAVIOR
###############################################
- id: classify_behavior
  type: llm
  name: "User intention routing and standardize user request"
  properties:
    model: gpt-4o
    prompt: |  
      Question: "{{user_question}}"

      Normalize the above question before proceeding with behavior classification. If in the question have words like advanced, oldbie, intense level,... make it becomes professional; newbie, starter, new,... make it becomes beginner 
      
      Choose one of these behavior:
        `exercise_advice`: The user wants to ask about specific exercises, muscle groups, workout methods, form, techniques, training tips, etc. Recognition: Contains keywords such as "chest workout," "back exercises," "correct form," "how to do push-ups," "is this the right way to train abs," etc. Does not require creating a workout plan.

        `generate_timetable`: The user wants to create a personalized workout schedule. Recognition: The question expresses a desire such as "workout schedule," "help me make a plan," "suggest a schedule," "what should I train this week," or mentions specific goals like "lose weight," "build muscle," "train 5 days/week," etc.

        `simple_qna`: A simple question that does not require document lookup or generating a plan. Examples: "What is BMI?", "Is it good to work out in the morning?", "Is creatine harmful?", etc.

        `smalltalk`: A casual or social conversation not related to business operations. Recognition: No specific action required; light, friendly chat with no processing needed.
        
        Examples: "Hello, how are you today?", "Are you doing well?"
      Return result with JSON format:
        {
          "behavior": "...",
          "final_question": "..."
        }
  output:
    behavior_json: "{{llm_output}}"
  next: parse_behavior_json

- id: parse_behavior_json
  type: function
  function: parse_json_fields
  input:
    json_string: "{{behavior_json}}"
    fields: ["behavior", "final_question"]
  output:
    behavior: "{{result.behavior}}"
    final_question: "{{result.final_question}}"
  next: route_behavior


###############################################
# EXERCISE ADVICE
###############################################
- id: route_behavior
  type: switch
  input: "{{behavior}}"
  cases:
    exercise_advice: find_key_word
    generate_timetable: create_timetable
    simple_qna: answer_qna
    smalltalk: handle_smalltalk


- id: find_key_word
  type: llm
  name: "Identity User Request Key word"
  properties:
    model: gpt-4o
    prompt: |
      You are an internal AI assistant for a fitness application.

      Your task is to generate a **Qdrant filter** from the user's natural language fitness question, based on the provided metadata fields.
      
      ---
      ### User question: "{{final_question}}"
      
      ### Processing Instructions:
      
      1. Analyze **user_question** to determine filter conditions, specifically:
         - Exact match values (match)
         - Approximate match values (like) only if exact match is not possible
         - Multiple possible values (in)
      
      2. Only use the available metadata fields:
         - muscle_group (chest, legs, back, shoulders, arms, abs)
         - experience_level (e.g., beginner, professional): if user request is
      
      3. If the question does not contain any information that matches these metadata fields, return exactly `"No"`.
      
      4. If there are matching fields, output **only one valid Qdrant JSON filter** without any explanations or comments.
      
      5. And uppercase first letter of each value
      
      6. If the value of muscle_group is only Triceps or Biceps, please make it BicepsAndTriceps
      ---
      ### Metadata fields: {
                            "muscle_group",
                            "experience_level"
                           }
      
      ### TODAY: {{today_date}}
      
      ---
      ### OUTPUT FORMAT EXAMPLE:
      For user_question: "Give me advanced chest workouts"
      ```json
      {
        "must": [
          { "key": "muscle_group", "match": { "value": "chest" } },
          { "key": "experience_level", "match": { "value": "advanced" } }
        ]
      }

  output:
    metadata_filter: "{{llm_output}}"
  next: vector_search_qdrant


- id: vector_search_qdrant
  type: vector_search
  name: "Vector search Qdrant local"
  properties:
    qdrant_url: "http://localhost:6333"
    collection_name: "official_general_documents"
    search_value: "final_question"
    metadata_filter: "metadata_filter"
    chunk_require: 50
    return_fields:
      - "text"
  output:
    qdrant_answer: "{{vector_result}}"
  next: qdrant_nl

- id: qdrant_nl
  type: llm
  name: "Identity User Request Key word"
  properties:
    model: gpt-4o
    prompt: |
      You are a friendly and knowledgeable AI fitness assistant.

      Your task is to answer the user's question using only the information provided in the search results from the fitness database.  
      The search results come from a Qdrant vector search and may include metadata such as muscle_group and experience_level, as well as detailed exercise descriptions.
      
      ---
      User question: {{final_question}}
      
      Search results: {{qdrant_answer}}
      
      ---
      ### Instructions for answering:
      1. If the search results contain relevant exercises or advice, write a natural, clear, and well-structured answer in English.
         - Mention the exercise name(s) and the target muscle group(s).
         - If multiple results are relevant, organize them in a list or steps.
         - Provide practical details such as:
           - Muscles targeted
           - Step-by-step guide
           - Common mistakes to avoid
           - Safety tips
      2. Adapt your language to match the user's experience level if it is available in the metadata (beginner, intermediate, advanced).
      3. If the search results are empty or irrelevant, politely say you could not find relevant exercises and ask for clarification.
      4. Do not invent exercises or information that are not in the search results.
      5. Keep the tone encouraging and professional.

  output:
    final_answer: "{{llm_output}}"
  next: end

###############################################
# SIMPLE QNA
###############################################

- id: answer_qna
  type: llm
  name: "Answer User Request"
  properties:
    model: gpt-4o
    prompt: |
       You are an AI fitness assistant to help user understand their problem about fitness, work out and gym.  
        Your task is to answer user question:  
        - Searching documents in a knowledge base    
        - Answer user question in natural language  
        
        Question: "{{final_question}}"
        ---
        Definition:
        - simple_qna: A direct, fact-based, conversational question about fitness, nutrition, health, or exercise concepts.  
          Examples:
            - "What is BMI?"
            - "Is creatine harmful?"
            - "Is it good to work out in the morning?"
            - "What is the difference between HIIT and cardio?"
        
        ---
        Return answer in natural language
    data: "final_reply"

  output:
    final_answer: "{{llm_output}}"
  next: end

  ###############################################
  # SMALL TALK
  ###############################################

- id: handle_smalltalk
  type: llm
  properties:
    model: gpt-4o
    prompt: |
      User question "{{final_question}}"
      Response short and friendly.
    data: "final_reply"

  output:
    final_answer: "{{llm_output}}"
  next: end


- id: end
  type: end
  name: "Kết thúc"
